#!/usr/bin/perl -w

=head1 NAME

=head1 USAGE

=head1 REQUIRED ARGUMENTS

=head1 OPTION

=head1 DESCRIPTION

=head1 DIAGNOSTICS

=head1 EXIT STATUS

=head1 CONFIGURATION

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

=head1 AUTHOR

=head1 LICENSE COPYRIGHT

=cut

#
# $Header: $
#

use strict;
use warnings;
use Getopt::Std;

my($Id) = 0;
my($Dev) = 'hdc';

system("git pull");
load_did();

sub usage {
	die <<"EOF";
Usage: $0 [options...] device
   --
Options:
   -x     -- turn Debugging on.
   -a     -- Ask for options
   -t     -- skip background test
   -i :   -- drive Id  ($Id)
   -q     -- Query system to find list drives on system
   -l     -- Process queryied list
EOF
}

if ($< != 0) {
	die "Can't do it, you need to be root to run smartctl\n";
}

my(%Serials);

my(%Opt);
getopts('xati:ql', \%Opt) || usage;

my($Debug) = $Opt{x} || 0;
my($Test)  = !($Opt{t} || 0);	# reverse skip negative logic
my($Ask)   = $Opt{a};
my($Query) = $Opt{q};
my($Qlist) = $Opt{l};

my($Host);

load_drives();

if ($Query) {
	my($ser, $id);

	for my $disk (query_drives()) {
#		learn_drive($disk);
		$ser = get_drive_id($disk);
		$id = $Serials{$ser};
		if ($id) {
			print "$disk $id: $ser\n";
			next;
		}
		print "Process... $disk\n";
		if ($Qlist) {
			save_did();
			$Dev = $disk;
			learn_drive($Id, $Dev);
			process_drive($Dev);
			$Id    = sprintf("%04d", $Id + 1);
		}
	}
	exit 1;
}

if ($Ask) {
	local($|) = 1;
	print "Drive: ";
	$Dev = <STDIN>;

	chomp $Dev;
	learn_drive($Dev);

	exit 1;
}

if (@ARGV == 0) {
	usage();
}
$Dev = $ARGV[0];
$Dev =~ s=/dev/==;

if (defined $Opt{i}) {
	$Id    = sprintf("%04d", $Opt{i});
} else {
	save_did();
}
learn_drive($Id, $Dev);

process_drive($Dev);

sub learn_drive {
	my($id, $dev) = @_;

	my($ser) = get_drive_id($dev);

	open(my $fd, ">> Drive.txt");
	print {$fd} "$id $ser\n";
	close($fd);

	learn_host($id, $dev);
}

sub learn_host {
	my($id, $dev) = @_;

	my($date) = `date +%04Y-%02m-%02d`; chomp $date;
	my($host) = hostname();

	open(my $fd, ">> Hosts.txt") or die;
	print {$fd} "$id $date $host $dev\n";
	close($fd);
}

sub get_drive_id {
	my($drv) = @_;

	my($mid, $sid) = ('-', '-');

	open(my $fd, "smartctl --info /dev/$drv |") or die "Can't run smartctl";
	while (<$fd>) {
		if (m/Device Model:\s+(.*)/) {
			$mid = $1;
			$mid =~ s/ /-/g;
			next;
		}
		if (m/Serial Number:\s+(.*)/) {
			$sid = $1;
			$sid =~ s/ /-/g;
			next;
		}
	}
	close($fd);

	my($rv) = "$mid $sid";

	if ($rv eq '- -') {
		$rv = hostname() . ' ' . $drv;
	}
	return $rv;
}

sub process_drive {
	my($drv) = @_;

	print "# >>>>>>>>>> Drive id: $Id <<<<<<<<<<\n";
	enable_smart();
	smartinfo();
	smarttest() if $Test;
	print "# >>>>>>>>>> Drive id: $Id <<<<<<<<<<\n";
}

sub load_did {
	my($line);

	open(D, "< Did.txt") or die "Can't open Did.txt ($!)\n";
	$line = <D>;
	if (defined $line) {
		chomp $line;
		$Id    = sprintf("%04d", $line + 1);
	} else {
		print "No data in Did.txt setting drive next drive to 1\n";
		$Id = '0001';
	}
	close(D);
}

sub load_drives {
	my($line);

	my($numb, $did, $mid, $ser);

	open(D, "< Drive.txt") or die "Can't open Drive.txt ($!)\n";
	while (<D>) {
		chomp;
		($numb, $did, $mid) = split(' ', $_, 3);
		$ser = "$did $mid";

		$Serials{$ser} = $numb;
	}
	close(D);
}

sub save_did {
	open(D, "> Did.txt") or die "Can't create Did.txt ($!)\n";
	print D "$Id\n";
	close(D);
}

sub enable_smart {
	run('enable', "smartctl -s on /dev/$Dev");
}

sub smartinfo {
	run('check', "smartctl --info --health --capabilities --attributes /dev/$Dev > Info/$Id.info");
}

sub run {
	my($mode, $cmd) = @_;

	my($date) = `date +%Y-%m-%d.%T`; chomp $date;

	$| = 1;
	print "+ $cmd\n";

	my($logfile) = "Log/$Id.$mode.$date.log";
	open(LOG, ">", $logfile) or die "Can't create log $logfile ($!)\n";
	open(FD, "-|", $cmd) or die;

	my ($wait) = 0;

	print LOG "#!# run: $cmd\n";
	while (<FD>) {
		print ':', $_;
		print LOG;

		if (/^Please wait (\d+) seconds/) {
			$wait = $1;
		}
	}
	close(FD);
	my($rc) = "$?";

	print LOG "#!# Exit: $rc\n";

	if ($wait) {
		print "Waiting: $wait ...";
		sleep($wait);
		print "\n";
	}

	close(LOG);

	return if $rc == 0;
	warn "#!# Failed!: rc=$rc\n";
}

sub smarttest {
	run('test', "smartctl -t offline /dev/$Dev");
}

#==============================================================================
#
sub query_drives {
	my(@list) = ();
	my($specials);

	# list of devices to look at
	# in defined dynamic filesystem to look at
	opendir(my $fd, "/sys/block") or die "Can't open /sys/block ($!)";

	while ($_ = readdir($fd)) {
		next if /^\./;		# directory entries . and ..

		next if /^ram/;		# memory devices
		next if /^md/;		# raid devices
		next if /^fd/;		# floppy drives
		next if /^sr/;		# cd-rom/dvd
		next if /^loop/;	# loopback
		next if /^dm/;		# LVM (device manager) devices

		next if /^sd\w\d/;	# partitions
		next if /^hd\w\d/;

		push(@list, $_);
	}
	closedir($fd);

	return sort @list;
}

sub hostname {
	return $Host if $Host;

	$Host = `hostname`; chomp $Host;
	return $Host;
}

END {
	system("git add . ; git commit -m'Drive $Dev $Id' ; git push");
}
